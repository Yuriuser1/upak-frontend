
# =================================================================
# UPAK Frontend - Continuous Integration
# =================================================================
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================================================================
  # Code Quality & Testing
  # =================================================================
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: upak_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: app/yarn.lock

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🔍 TypeScript check
        working-directory: ./app
        run: yarn type-check

      - name: 🎨 ESLint check
        working-directory: ./app
        run: yarn lint

      - name: 💅 Prettier check
        working-directory: ./app
        run: yarn format:check

      - name: 🗃️ Generate Prisma client
        working-directory: ./app
        run: npx prisma generate

      - name: 🗃️ Run database migrations
        working-directory: ./app
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/upak_test
        run: npx prisma db push

      - name: 🧪 Run unit tests
        working-directory: ./app
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/upak_test
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000
        run: yarn test:ci

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # =================================================================
  # Build & Security
  # =================================================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: app/yarn.lock

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile

      - name: 🗃️ Generate Prisma client
        working-directory: ./app
        run: npx prisma generate

      - name: 🏗️ Build application
        working-directory: ./app
        run: yarn build
        env:
          NODE_ENV: production

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            app/.next
            app/public
          retention-days: 1

  # =================================================================
  # Security Audit
  # =================================================================
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: app/yarn.lock

      - name: 🔍 Run security audit
        working-directory: ./app
        run: yarn audit --level moderate || echo "Security audit found issues, but continuing"
        continue-on-error: true

      - name: 🔒 Run Snyk security check
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=app/package.json
        continue-on-error: true

  # =================================================================
  # Lighthouse Audit
  # =================================================================
  lighthouse:
    name: 🚦 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: app/yarn.lock

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files
          path: app/

      - name: 📦 Install dependencies
        working-directory: ./app
        run: yarn install --frozen-lockfile --production

      - name: 🚀 Start application
        working-directory: ./app
        run: |
          yarn start &
          sleep 30
        env:
          NODE_ENV: production

      - name: 🚦 Run Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # =================================================================
  # Docker Build
  # =================================================================
  docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =================================================================
  # Deploy to Staging
  # =================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Здесь будет код для деплоя на staging

  # =================================================================
  # Deploy to Production
  # =================================================================
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Здесь будет код для деплоя на production

  # =================================================================
  # Notify
  # =================================================================
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📢 Send Slack notification
        if: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          text: 'UPAK Frontend deployment completed!'
